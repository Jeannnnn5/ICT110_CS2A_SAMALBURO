{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOSiUA/jC4EN5vbG6jo+I9o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ZZpsNuHYEg_6"},"source":["### Exercise\n","\n","A. Choose the values from the range of numbers 1 to 100.\n","1. Create an array with 30 values within the range of numbers given. You can choose your own start value and stop value. However, the incrementing value will be 2.\n","   * Explain what is the result briefly by writing a comment before the code.\n","2. Multiply the resulting array with 3. Print the result."]},{"cell_type":"code","source":["#The code multiplies each odd number from 6 to 62 with a step size of 2 then multiplies each element of the array by 3.\n","\n","import numpy as np\n","array = np.arange(6, 63, 2)\n","\n","result = array * 3\n","print(result)"],"metadata":{"id":"VOOaFwf7SYF5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715215710675,"user_tz":-480,"elapsed":350,"user":{"displayName":"Jean Grace SAMALBURO","userId":"12999487836276851784"}},"outputId":"0dbd08cb-b2d4-441c-a03e-559313bfb515"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 18  24  30  36  42  48  54  60  66  72  78  84  90  96 102 108 114 120\n"," 126 132 138 144 150 156 162 168 174 180 186]\n"]}]},{"cell_type":"markdown","metadata":{"id":"a0fwbujzEhAC"},"source":["### Exercise\n","\n","A. Create a four-dimensional array of random integers in the interval [0, 12]. Print the result.\n","1. Get the dimensions, shape, and size.\n","    * Explain what is the result briefly by writing a comment before the code.\n","\n","B. Get the maximum number for each dimensions and display it.\n","   * Explain what is the result briefly by writing a comment before the code.\n","\n","C. Multipy each array with 4. What is its result?\n","    * Write a brief explanation on the multiplication process.\n"]},{"cell_type":"code","source":["import numpy as np\n","\n","array = np.random.randint(0, 13, size=(4, 6, 2, 7))\n","print(array)\n","\n","# Get the dimensions, shape, and size.\n","# Dimensions- Number of axes (dimensions) of the array, is 4.\n","# Shape- Representing the size of the array along each dimension, which is (4, 6, 2, 7).\n","# Size- Total number of elements in the array, which is the product of the shape dimensions: 4 * 6 * 2 * 7 = 336.\n","print(\"Dimensions:\", array.ndim)\n","print(\"Shape:\", array.shape)\n","print(\"Size:\", array.size)"],"metadata":{"id":"p1kJMNKG2kbB","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1716043199015,"user_tz":-480,"elapsed":287,"user":{"displayName":"Jean Grace SAMALBURO","userId":"12999487836276851784"}},"outputId":"fa9b1aeb-e3ce-4b97-fee1-49c475609b85"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[[ 6  8  9  4  1  2 12]\n","   [ 7  6 12  7 11  1  4]]\n","\n","  [[ 8  2  4 12 11  5  2]\n","   [ 3  5 11  2  9  6  7]]\n","\n","  [[12 10  7  0 12  5 12]\n","   [ 5  6 10  1  1  2 10]]\n","\n","  [[11 12  8 12  6  7  4]\n","   [ 0 11  6 11  0 12  4]]\n","\n","  [[ 2  9  1  4  7  7  4]\n","   [ 8  2  2  0  2 10  4]]\n","\n","  [[ 1  9  7 10 10 12  2]\n","   [ 9  0  3 10  3  3  9]]]\n","\n","\n"," [[[ 6  5  0 11 11  5  7]\n","   [ 0  6 11 10 10 10  6]]\n","\n","  [[ 1  8  3  7 10  9  5]\n","   [ 0  2 11 12 12  3  5]]\n","\n","  [[ 1  7  2  1  2  2 11]\n","   [ 8 11  0 10  6 11  1]]\n","\n","  [[ 2  1  2  5  4  7  8]\n","   [ 2 12  0  6 11  8  1]]\n","\n","  [[10  4  2  0  0  7 12]\n","   [ 4  6  3  2  7  7  3]]\n","\n","  [[ 3  1 11 11  1 11  3]\n","   [ 9  8  8  6  6  1  4]]]\n","\n","\n"," [[[ 5  9 12  3  7  2 12]\n","   [ 8  8  2  1  6  0  3]]\n","\n","  [[ 7 11 10 10  6 12  2]\n","   [ 8 11  3 11  7  1  3]]\n","\n","  [[12  6  5  1  2  4  0]\n","   [ 9  3  4  2  8  9 11]]\n","\n","  [[ 0  4 12  1  9  6  9]\n","   [ 6  1  9  0  3  2  6]]\n","\n","  [[ 1 10 10  2  9  5  9]\n","   [ 6  5  5 12 12  2  5]]\n","\n","  [[ 5  5 12  4  2  1 12]\n","   [ 3  1  2  6  5 10 12]]]\n","\n","\n"," [[[11 12  4  5  7 11  3]\n","   [12  9  1  3  1  4 10]]\n","\n","  [[ 5  9  4  0  1  9  6]\n","   [ 1 12  9  1  2  2  5]]\n","\n","  [[ 4  5  8  2 11  4  3]\n","   [ 9  4  2  5  7  1  6]]\n","\n","  [[ 1  0 11  9  6  0  8]\n","   [ 6 12 10  5 10  0  0]]\n","\n","  [[11  1 10  5  4  7  3]\n","   [ 0  9  7  9  0  1  5]]\n","\n","  [[ 0  5  3 11  9  9  9]\n","   [ 0  8  3 12  3  7  9]]]]\n","Dimensions: 4\n","Shape: (4, 6, 2, 7)\n","Size: 336\n"]}]},{"cell_type":"code","source":["# Get the maximum number for each dimension and display it.\n","# Since we specify all axes (0, 1, 2, 3), it reduces the array to a single maximum value.\n","max_dim = np.max(array, axis=(0, 1, 2, 3))\n","print(\"Maximum number for each dimension:\", max_dim)"],"metadata":{"id":"G2KV2x3L3pV_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716043247403,"user_tz":-480,"elapsed":322,"user":{"displayName":"Jean Grace SAMALBURO","userId":"12999487836276851784"}},"outputId":"0de8678b-a4a6-4ecd-f3e0-43527ffbe84c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum number for each dimension: 12\n"]}]},{"cell_type":"code","source":["# Multiply each array element by 3.\n","# This operation scales all values in the array by a factor of 3, creating a new array with the same shape.\n","array_multiplied = array * 3\n","print(\"Array after multiplication by 3:\\n\", array_multiplied)"],"metadata":{"id":"QneSqvFB3sDh","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1716043523548,"user_tz":-480,"elapsed":444,"user":{"displayName":"Jean Grace SAMALBURO","userId":"12999487836276851784"}},"outputId":"c550dc41-388e-4840-b386-1a620ec0fe05"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Array after multiplication by 3:\n"," [[[[18 24 27 12  3  6 36]\n","   [21 18 36 21 33  3 12]]\n","\n","  [[24  6 12 36 33 15  6]\n","   [ 9 15 33  6 27 18 21]]\n","\n","  [[36 30 21  0 36 15 36]\n","   [15 18 30  3  3  6 30]]\n","\n","  [[33 36 24 36 18 21 12]\n","   [ 0 33 18 33  0 36 12]]\n","\n","  [[ 6 27  3 12 21 21 12]\n","   [24  6  6  0  6 30 12]]\n","\n","  [[ 3 27 21 30 30 36  6]\n","   [27  0  9 30  9  9 27]]]\n","\n","\n"," [[[18 15  0 33 33 15 21]\n","   [ 0 18 33 30 30 30 18]]\n","\n","  [[ 3 24  9 21 30 27 15]\n","   [ 0  6 33 36 36  9 15]]\n","\n","  [[ 3 21  6  3  6  6 33]\n","   [24 33  0 30 18 33  3]]\n","\n","  [[ 6  3  6 15 12 21 24]\n","   [ 6 36  0 18 33 24  3]]\n","\n","  [[30 12  6  0  0 21 36]\n","   [12 18  9  6 21 21  9]]\n","\n","  [[ 9  3 33 33  3 33  9]\n","   [27 24 24 18 18  3 12]]]\n","\n","\n"," [[[15 27 36  9 21  6 36]\n","   [24 24  6  3 18  0  9]]\n","\n","  [[21 33 30 30 18 36  6]\n","   [24 33  9 33 21  3  9]]\n","\n","  [[36 18 15  3  6 12  0]\n","   [27  9 12  6 24 27 33]]\n","\n","  [[ 0 12 36  3 27 18 27]\n","   [18  3 27  0  9  6 18]]\n","\n","  [[ 3 30 30  6 27 15 27]\n","   [18 15 15 36 36  6 15]]\n","\n","  [[15 15 36 12  6  3 36]\n","   [ 9  3  6 18 15 30 36]]]\n","\n","\n"," [[[33 36 12 15 21 33  9]\n","   [36 27  3  9  3 12 30]]\n","\n","  [[15 27 12  0  3 27 18]\n","   [ 3 36 27  3  6  6 15]]\n","\n","  [[12 15 24  6 33 12  9]\n","   [27 12  6 15 21  3 18]]\n","\n","  [[ 3  0 33 27 18  0 24]\n","   [18 36 30 15 30  0  0]]\n","\n","  [[33  3 30 15 12 21  9]\n","   [ 0 27 21 27  0  3 15]]\n","\n","  [[ 0 15  9 33 27 27 27]\n","   [ 0 24  9 36  9 21 27]]]]\n"]}]}]}